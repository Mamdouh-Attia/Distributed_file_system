// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: dfs.proto

package utils

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DistributedFileSystem_HeartbeatUpdate_FullMethodName       = "/dfs.DistributedFileSystem/HeartbeatUpdate"
	DistributedFileSystem_UploadRequest_FullMethodName         = "/dfs.DistributedFileSystem/UploadRequest"
	DistributedFileSystem_NotifyCompletedUpload_FullMethodName = "/dfs.DistributedFileSystem/NotifyCompletedUpload"
	DistributedFileSystem_ReplicateFile_FullMethodName         = "/dfs.DistributedFileSystem/ReplicateFile"
	DistributedFileSystem_AskForDownload_FullMethodName        = "/dfs.DistributedFileSystem/AskForDownload"
	DistributedFileSystem_DownloadFile_FullMethodName          = "/dfs.DistributedFileSystem/DownloadFile"
)

// DistributedFileSystemClient is the client API for DistributedFileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedFileSystemClient interface {
	// Check if the data node is alive
	HeartbeatUpdate(ctx context.Context, in *DataKeeper, opts ...grpc.CallOption) (*Empty, error)
	// Uploading sequence
	UploadRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UploadResponse, error)
	NotifyCompletedUpload(ctx context.Context, in *UploadNotification, opts ...grpc.CallOption) (*UploadNotificationResponse, error)
	// Replication sequence
	ReplicateFile(ctx context.Context, in *ReplicateFileRequest, opts ...grpc.CallOption) (*ReplicateFileResponse, error)
	// Downloading sequence (from master to client)
	AskForDownload(ctx context.Context, in *AskForDownloadRequest, opts ...grpc.CallOption) (*AskForDownloadResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
}

type distributedFileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedFileSystemClient(cc grpc.ClientConnInterface) DistributedFileSystemClient {
	return &distributedFileSystemClient{cc}
}

func (c *distributedFileSystemClient) HeartbeatUpdate(ctx context.Context, in *DataKeeper, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DistributedFileSystem_HeartbeatUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedFileSystemClient) UploadRequest(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, DistributedFileSystem_UploadRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedFileSystemClient) NotifyCompletedUpload(ctx context.Context, in *UploadNotification, opts ...grpc.CallOption) (*UploadNotificationResponse, error) {
	out := new(UploadNotificationResponse)
	err := c.cc.Invoke(ctx, DistributedFileSystem_NotifyCompletedUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedFileSystemClient) ReplicateFile(ctx context.Context, in *ReplicateFileRequest, opts ...grpc.CallOption) (*ReplicateFileResponse, error) {
	out := new(ReplicateFileResponse)
	err := c.cc.Invoke(ctx, DistributedFileSystem_ReplicateFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedFileSystemClient) AskForDownload(ctx context.Context, in *AskForDownloadRequest, opts ...grpc.CallOption) (*AskForDownloadResponse, error) {
	out := new(AskForDownloadResponse)
	err := c.cc.Invoke(ctx, DistributedFileSystem_AskForDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedFileSystemClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, DistributedFileSystem_DownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedFileSystemServer is the server API for DistributedFileSystem service.
// All implementations must embed UnimplementedDistributedFileSystemServer
// for forward compatibility
type DistributedFileSystemServer interface {
	// Check if the data node is alive
	HeartbeatUpdate(context.Context, *DataKeeper) (*Empty, error)
	// Uploading sequence
	UploadRequest(context.Context, *Empty) (*UploadResponse, error)
	NotifyCompletedUpload(context.Context, *UploadNotification) (*UploadNotificationResponse, error)
	// Replication sequence
	ReplicateFile(context.Context, *ReplicateFileRequest) (*ReplicateFileResponse, error)
	// Downloading sequence (from master to client)
	AskForDownload(context.Context, *AskForDownloadRequest) (*AskForDownloadResponse, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	mustEmbedUnimplementedDistributedFileSystemServer()
}

// UnimplementedDistributedFileSystemServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedFileSystemServer struct {
}

func (UnimplementedDistributedFileSystemServer) HeartbeatUpdate(context.Context, *DataKeeper) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatUpdate not implemented")
}
func (UnimplementedDistributedFileSystemServer) UploadRequest(context.Context, *Empty) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRequest not implemented")
}
func (UnimplementedDistributedFileSystemServer) NotifyCompletedUpload(context.Context, *UploadNotification) (*UploadNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyCompletedUpload not implemented")
}
func (UnimplementedDistributedFileSystemServer) ReplicateFile(context.Context, *ReplicateFileRequest) (*ReplicateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateFile not implemented")
}
func (UnimplementedDistributedFileSystemServer) AskForDownload(context.Context, *AskForDownloadRequest) (*AskForDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForDownload not implemented")
}
func (UnimplementedDistributedFileSystemServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedDistributedFileSystemServer) mustEmbedUnimplementedDistributedFileSystemServer() {}

// UnsafeDistributedFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedFileSystemServer will
// result in compilation errors.
type UnsafeDistributedFileSystemServer interface {
	mustEmbedUnimplementedDistributedFileSystemServer()
}

func RegisterDistributedFileSystemServer(s grpc.ServiceRegistrar, srv DistributedFileSystemServer) {
	s.RegisterService(&DistributedFileSystem_ServiceDesc, srv)
}

func _DistributedFileSystem_HeartbeatUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataKeeper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFileSystemServer).HeartbeatUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedFileSystem_HeartbeatUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFileSystemServer).HeartbeatUpdate(ctx, req.(*DataKeeper))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedFileSystem_UploadRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFileSystemServer).UploadRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedFileSystem_UploadRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFileSystemServer).UploadRequest(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedFileSystem_NotifyCompletedUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFileSystemServer).NotifyCompletedUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedFileSystem_NotifyCompletedUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFileSystemServer).NotifyCompletedUpload(ctx, req.(*UploadNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedFileSystem_ReplicateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFileSystemServer).ReplicateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedFileSystem_ReplicateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFileSystemServer).ReplicateFile(ctx, req.(*ReplicateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedFileSystem_AskForDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskForDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFileSystemServer).AskForDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedFileSystem_AskForDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFileSystemServer).AskForDownload(ctx, req.(*AskForDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedFileSystem_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedFileSystemServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedFileSystem_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedFileSystemServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedFileSystem_ServiceDesc is the grpc.ServiceDesc for DistributedFileSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedFileSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.DistributedFileSystem",
	HandlerType: (*DistributedFileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartbeatUpdate",
			Handler:    _DistributedFileSystem_HeartbeatUpdate_Handler,
		},
		{
			MethodName: "UploadRequest",
			Handler:    _DistributedFileSystem_UploadRequest_Handler,
		},
		{
			MethodName: "NotifyCompletedUpload",
			Handler:    _DistributedFileSystem_NotifyCompletedUpload_Handler,
		},
		{
			MethodName: "ReplicateFile",
			Handler:    _DistributedFileSystem_ReplicateFile_Handler,
		},
		{
			MethodName: "AskForDownload",
			Handler:    _DistributedFileSystem_AskForDownload_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _DistributedFileSystem_DownloadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfs.proto",
}
