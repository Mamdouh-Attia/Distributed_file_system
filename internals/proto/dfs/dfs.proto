syntax = "proto3";
////////Mamdouh////////
//To asaad , omar and Nabil .. modify this file to add the necessary messages and services
//after that run the following command in the terminal to generate the files
//Please run the following command in the terminal
// protoc --go-grpc_out=paths=source_relative:. --go_out=paths=source_relative:. internals/proto/dfs/dfs.proto

option go_package =  "Distributed_file_system/internals/proto/dfs";

package dfs;

///// Master ///////
message Master {
    string ip = 1;
    int32 port = 2;
    repeated MasterRecord records = 3;
    repeated DataNode dataNodes = 4;
}

message MasterRecord {
    File file = 1;
    int32 DataKeeperNodeID = 2;
    int32 port = 3;
    bool IsDataNodeAlive = 4;
}

message File {
    string name = 1;
    string content = 2;
    string path = 3;
}



service MasterService {
    rpc GetMaster(Empty) returns (GetMasterResponse) {}
    rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {}
    rpc AddRecord(AddRecordRequest) returns (AddRecordResponse) {}
    rpc DeleteRecord(DeleteRecordRequest) returns (DeleteRecordResponse) {}
    rpc getSourceNode(GetRecordRequest) returns (GetSourceNodeResponse) {}
    rpc HeartbeatUpdate (HeartbeatRequest) returns (HeartbeatResponse) {}
    rpc GetInstanceCount (GetInstanceCountRequest) returns (GetInstanceCountResponse){}
    rpc selectMachineToCopyTo(Empty) returns (selectMachineToCopyToResponse) {}
    rpc NotifyMachineDataTransfer(NotifyMachineDataTransferRequest) returns (NotifyMachineDataTransferResponse) {}
}

message Empty {}

message GetMasterResponse {
    Master master = 1;
}

message GetRecordRequest {
    string filename = 1;
}

message GetRecordResponse {
    MasterRecord record = 1;
}

message AddRecordRequest {
    MasterRecord record = 1;
}

message AddRecordResponse {
    bool success = 1;
}

message DeleteRecordRequest {
    string filename = 1;
}

message DeleteRecordResponse {
    bool success = 1;
}

message GetSourceNodeRequest {
    string filename = 1;
}

message GetSourceNodeResponse {
    DataNode sourceMachine = 1;
}

message HeartbeatRequest {
    int32 id = 1;
    string ip = 2;
    int32 port = 3;
}

message HeartbeatResponse {
    int32 id = 1;
    string ip = 2;
    int32 port = 3;
    string status = 4;
}

message GetInstanceCountRequest {
    string filename = 1;
}

message GetInstanceCountResponse {
    int32 count = 1;
}

message selectMachineToCopyToResponse {
    DataNode machine = 1;
}

message NotifyMachineDataTransferRequest {
    DataNode sourceMachine = 1;
    DataNode destinationMachine = 2;
    File fileToCopy = 3;
}

message NotifyMachineDataTransferResponse {
    bool success = 1;
}

//// Data Node /////
message DataNode {
    int32 id = 1; // Unique identifier for the node
    string name = 2; // Name of the node
    string ip = 3; // IP address of the node
    int32 port = 4; // Port number the node is listening on
    repeated string files = 5; // List of filenames stored on the node
}
