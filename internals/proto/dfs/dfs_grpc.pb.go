// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: internals/proto/dfs/dfs.proto

package dfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HeartbeatUpdate_HeartbeatUpdate_FullMethodName = "/dfs.HeartbeatUpdate/HeartbeatUpdate"
)

// HeartbeatUpdateClient is the client API for HeartbeatUpdate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatUpdateClient interface {
	HeartbeatUpdate(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartbeatUpdateClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatUpdateClient(cc grpc.ClientConnInterface) HeartbeatUpdateClient {
	return &heartbeatUpdateClient{cc}
}

func (c *heartbeatUpdateClient) HeartbeatUpdate(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, HeartbeatUpdate_HeartbeatUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatUpdateServer is the server API for HeartbeatUpdate service.
// All implementations must embed UnimplementedHeartbeatUpdateServer
// for forward compatibility
type HeartbeatUpdateServer interface {
	HeartbeatUpdate(context.Context, *Heartbeat) (*HeartbeatResponse, error)
	mustEmbedUnimplementedHeartbeatUpdateServer()
}

// UnimplementedHeartbeatUpdateServer must be embedded to have forward compatible implementations.
type UnimplementedHeartbeatUpdateServer struct {
}

func (UnimplementedHeartbeatUpdateServer) HeartbeatUpdate(context.Context, *Heartbeat) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatUpdate not implemented")
}
func (UnimplementedHeartbeatUpdateServer) mustEmbedUnimplementedHeartbeatUpdateServer() {}

// UnsafeHeartbeatUpdateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatUpdateServer will
// result in compilation errors.
type UnsafeHeartbeatUpdateServer interface {
	mustEmbedUnimplementedHeartbeatUpdateServer()
}

func RegisterHeartbeatUpdateServer(s grpc.ServiceRegistrar, srv HeartbeatUpdateServer) {
	s.RegisterService(&HeartbeatUpdate_ServiceDesc, srv)
}

func _HeartbeatUpdate_HeartbeatUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatUpdateServer).HeartbeatUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeartbeatUpdate_HeartbeatUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatUpdateServer).HeartbeatUpdate(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

// HeartbeatUpdate_ServiceDesc is the grpc.ServiceDesc for HeartbeatUpdate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartbeatUpdate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.HeartbeatUpdate",
	HandlerType: (*HeartbeatUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartbeatUpdate",
			Handler:    _HeartbeatUpdate_HeartbeatUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internals/proto/dfs/dfs.proto",
}
