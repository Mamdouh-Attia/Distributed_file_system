syntax = "proto3";

option go_package =  "master_node/";

package master_node;

message Empty {}

message DataKeeper {
    int32 id = 1;
    string ip = 2;
    string port = 3;
}

message File {
    string name = 1;
    string path = 2;
    bytes content = 3;
}

// Register a data node to the master
message RegisterDataNodeRequest {
    DataKeeper dataKeeper = 1;
}

message RegisterDataNodeResponse {
    bool success = 1;
    int32 nodeID = 2;
}

message ReceiveFileListRequest {
    int32 nodeID = 1;
    repeated string files = 2;
}

message ReceiveFileListResponse {
    bool success = 1;
}   


message AskForDownloadResponse {
    map<string, string> fileLocations = 1;
}

message AskForDownloadRequest {
    string fileName = 1;
}

message UploadResponse { 
    string port = 1;
}

message HeartbeatUpdateRequest {
    int32 nodeID = 1;
}

message HeartbeatUpdateResponse {
    bool success = 1;
}

message DownloadFileRequest {
    string fileName = 1;
}

//The master should respond with a list of machines IP addresses and ports that have the file requested
message DownloadFileResponse {
    repeated DataKeeper dataKeepers = 1;
}

service MasterNode {
    // Register a data node to the master
    rpc RegisterDataNode(RegisterDataNodeRequest) returns (RegisterDataNodeResponse);

    // Receive the list of files from the Data node
    rpc ReceiveFileList(ReceiveFileListRequest) returns (ReceiveFileListResponse);


    // Downloading sequence (from master to client)
    rpc AskForDownload(AskForDownloadRequest) returns (AskForDownloadResponse);

    // The client should request from the master to upload a file
    rpc UploadRequest(Empty) returns (UploadResponse);

    // Check if the data node is alive
    rpc HeartbeatUpdate(HeartbeatUpdateRequest) returns (HeartbeatUpdateResponse);

    // The client should request from the master to download a file
    rpc DownloadRequest(DownloadFileRequest) returns (DownloadFileResponse);
}